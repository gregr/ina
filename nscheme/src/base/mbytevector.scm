(define (mbytes . args)
  (let ((x (make-mbytes (length args) 0)))
    (let loop ((i 0) (args args))
      (cond ((null? args) x)
            (else         (mbytes-set! x i (car args))
                          (loop (+ i 1) (cdr args)))))))

(define mbytes-fill!
  (let ((go (lambda (mbv v start count)
              (nonnegative-integer? start)
              (nonnegative-integer? count)
              (let ((end (+ start count)))
                (unless (<= end (mbytes-length mbv))
                  (mistake 'mbytes-fill! "range out of bounds" start count (mbytes-length mbv)))
                (for-each (lambda (i) (mbytes-set! mbv i v)) (range start end))))))
  (case-lambda
    ((mbv v)             (go mbv v 0     (mbytes-length mbv)))
    ((mbv v start)       (go mbv v start (- (mbytes-length mbv) start)))
    ((mbv v start count) (go mbv v start count)))))

(define mbytes-copy!
  (local
    ((define (bounds?! dst start.dst len.src start.src count)
       (nonnegative-integer?! start.src)
       (nonnegative-integer?! start.dst)
       (nonnegative-integer?! count)
       (unless (<= (+ start.dst count) (mbytes-length dst))
         (mistake 'mbytes-copy! "destination range is out of bounds" start.dst count
                  (mbytes-length dst)))
       (unless (<= (+ start.src count) len.src)
         (mistake 'mbytes-copy! "source range is out of bounds" start.src count len.src)))
     (define (copy-forward! dst start.dst src start.src count)
       (for-each (lambda (i) (mbytes-set! dst (+ start.dst i) (mbytes-ref src (+ start.src i))))
                 (range 0 count)))
     (define (copy-backward! dst start.dst src start.src count)
       (for-each (lambda (i) (mbytes-set! dst (+ start.dst i) (mbytes-ref src (+ start.src i))))
                 (range (- count 1) -1 -1)))
     (define (copy-bytes! dst start.dst src start.src count)
       (for-each (lambda (i) (mbytes-set! dst (+ start.dst i) (bytes-ref src (+ start.src i))))
                 (range 0 count))))
    (lambda (dst start.dst src start.src count)
      (cond ((mbytes? src) (bounds?! dst start.dst (mbytes-length src) start.src count)
                           (if (and (eqv? dst src) (< start.src start.dst))
                               (copy-backward! dst start.dst src start.src count)
                               (copy-forward!  dst start.dst src start.src count)))
            ((bytes? src)  (bounds?! dst start.dst (bytes-length src) start.src count)
                           (copy-bytes! dst start.dst src start.src count))
            (else          (mistake 'mbytes-copy! "not a bytes or mbytes" src))))))

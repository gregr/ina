(define (bytes->symbol x) (string->symbol (bytes->string x)))
(define (symbol->bytes x) (string->bytes (symbol->string x)))
(define (make-bytes n b) (mbytes->bytes (make-mbytes n b)))
(define (list->bytes x*) (apply bytes x*))

(define bytes->list
  (case-lambda
    ((bv)             (bytes->list bv 0     (bytes-length bv)))
    ((bv start)       (bytes->list bv start (- (bytes-length bv) start)))
    ((bv start count) (let loop ((i (- (+ start count) 1)) (result '()))
                        (if (< i start)
                            result
                            (loop (- i 1) (cons (bytes-ref bv i) result)))))))

(define (bytes-take x n) (bytes->list x 0 (min (bytes-length x) n)))

(define (bytes-append . x*) (bytes-append* x*))
(define (bytes-append* x*)
  (let ((mbv (make-mbytes
               (let loop ((x* x*) (len 0))
                 (if (null? x*)
                     len
                     (loop (cdr x*) (+ (bytes-length (car x*)) len))))
               0)))
    (let loop ((x* x*) (i 0))
      (if (null? x*)
          (mbytes->bytes mbv)
          (let* ((bv (car x*)) (len (bytes-length bv)))
            (mbytes-copy! mbv i bv 0 len)
            (loop (cdr x*) (+ i len)))))))

(define (bytes-join separator . x*) (bytes-join* separator x*))
(define (bytes-join* separator x*)
  (if (null? x*)
      #""
      (let* ((len.sep (bytes-length separator))
             (mbv (make-mbytes
                    (let loop ((x (car x*)) (x* (cdr x*)) (final-size 0))
                      (let ((final-size (+ (bytes-length x) final-size)))
                        (if (null? x*)
                            final-size
                            (loop (car x*) (cdr x*) (+ len.sep final-size)))))
                    0)))
        (let loop ((i 0) (x (car x*)) (x* (cdr x*)))
          (let ((len (bytes-length x)))
            (mbytes-copy! mbv i x 0 len)
            (if (null? x*)
                (mbytes->bytes mbv)
                (let ((i (+ i len)))
                  (mbytes-copy! mbv i separator 0 len.sep)
                  (loop (+ i len.sep) (car x*) (cdr x*)))))))))

(define (bytes-slice bv start end) (bytes-copy bv start (- end start)))
(define (bytes-copy bv start count)
  (if (and (= count (bytes-length bv)) (= start 0))
      bv
      (let ((new (make-mbytes count 0)))
        (mbytes-copy! new 0 bv start count)
        (mbytes->bytes new))))

(define (bytes-index-start/? ?)
  (let ((go (lambda (bv start)
              (let ((len (bytes-length bv)))
                (let loop ((i start))
                  (if (or (<= len i) (? (bytes-ref bv i))) i (loop (+ i 1))))))))
    (case-lambda
      ((bv)       (go bv 0))
      ((bv start) (go bv start)))))
(define (bytes-index-end/? ?)
  (let ((go (lambda (bv end)
              (let loop ((i end))
                (if (or (<= i 0) (? (bytes-ref bv (- i 1)))) i (loop (- i 1)))))))
    (case-lambda
      ((bv)     (go bv (bytes-length bv)))
      ((bv end) (go bv end)))))
(define (bytes-index-start/byte b) (bytes-index-start/? (lambda (x) (= x b))))
(define (bytes-index-end/byte   b) (bytes-index-end/?   (lambda (x) (= x b))))

(define ((bytes-split/? ?) bv)
  (let ((len (bytes-length bv)))
    (let loop-segment ((start 0))
      (let loop-byte ((i start))
        (define (make-segment) (bytes-slice bv start i))
        (cond ((= i len)            (list (make-segment)))
              ((? (bytes-ref bv i)) (cons (make-segment) (loop-segment (+ i 1))))
              (else                 (loop-byte (+ i 1))))))))
(define (bytes-split/separator separator) (bytes-split/? (lambda (x) (= x separator))))
(define (bytes-split bv separator) ((bytes-split/separator separator) bv))

(define ((bytes-rtrim1/? ?) bv)
  (let ((len (bytes-length bv)))
    (if (and (< 0 len) (? (bytes-ref bv (- len 1))))
        (bytes-copy bv 0 (- len 1))
        bv)))
(define ((bytes-rtrim/? ?) bv)
  (let ((i ((bytes-index-end/? (lambda (x) (not (? x)))) bv)))
    (if i (bytes-copy bv 0 i) bv)))
(define ((bytes-ltrim/? ?) bv)
  (let ((i ((bytes-index-start/? (lambda (x) (not (? x)))) bv)))
    (if i (bytes-slice bv i (bytes-length bv)) bv)))
(define (bytes-rtrim1/byte b) (bytes-rtrim1/? (lambda (x) (= x b))))
(define (bytes-rtrim/byte b) (bytes-rtrim/? (lambda (x) (= x b))))
(define (bytes-ltrim/byte b) (bytes-ltrim/? (lambda (x) (= x b))))
(define (bytes-rtrim1 bv b) ((bytes-rtrim1/byte b) bv))
(define (bytes-rtrim  bv b) ((bytes-rtrim/byte b) bv))
(define (bytes-ltrim  bv b) ((bytes-ltrim/byte b) bv))

(define-syntax (define-record-type-accessor* stx)
  (apply (lambda (_ rtd . accessor-name*)
           (quasiquote-syntax
             (begin (define access (rtd-accessor #,rtd))
                    . #,(map (lambda (i accessor-name)
                               (quasiquote-syntax (define (#,accessor-name r) (access r #,i))))
                             (range (length accessor-name*))
                             accessor-name*))))
         (syntax->list stx)))
(define-syntax (define-record-type-mutator* stx)
  (apply (lambda (_ rtd . mutator-name*)
           (quasiquote-syntax
             (begin (define mutate! (rtd-mutator #,rtd))
                    . #,(map (lambda (i mutator-name)
                               (if mutator-name
                                   (quasiquote-syntax (define (#,mutator-name r x) (mutate! r #,i x)))
                                   (quote-syntax (begin))))
                             (range (length mutator-name*))
                             mutator-name*))))
         (syntax->list stx)))
(define-syntax (define-record-type stx)
  (apply (lambda (_ constructor-name predicate-name . field-desc*)
           (mlet ((mutable? #f))
             (let ((field-desc*
                     (map (lambda (stx)
                            (if (identifier? stx)
                                (cons stx #f)
                                (let ((fdesc (syntax->list stx)))
                                  (case (length fdesc)
                                    ((1) (cons (car fdesc) #f))
                                    ((2) (set! mutable? #t) (cons (car fdesc) (cadr fdesc)))
                                    (else (raise-parse-error "not a record field description" stx))))))
                          field-desc*)))
               (quasiquote-syntax
                 (begin (define rtd (make-rtd '#,constructor-name #,(length field-desc*) #,mutable?))
                        (define #,constructor-name (rtd-constructor rtd))
                        (define #,predicate-name   (rtd-predicate   rtd))
                        (define access             (rtd-accessor    rtd))
                        (define mutate!            (rtd-mutator     rtd))
                        (define-record-type-accessor* rtd . #,(map car field-desc*))
                        (define-record-type-mutator*  rtd . #,(map cdr field-desc*)))))))
         (syntax->list stx)))

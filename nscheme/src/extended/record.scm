(define-syntax (define-record-type-accessor* stx)
  (syntax-case stx ()
    ((_ rtd accessor-name ...)
     (with-syntax (((i ...) (range (length (syntax->list #'(accessor-name ...))))))
       #'(begin (define access (rtd-accessor rtd))
                (define (accessor-name r) (access r i)) ...)))))

(define-syntax (define-record-type-mutator* stx)
  (syntax-case stx ()
    ((_ rtd . mutator-name*)
     (let ((mutator-name* (syntax->list #'mutator-name*)))
       #`(begin (define mutate! (rtd-mutator rtd))
                . #,(filter (lambda (x) x)
                            (map (lambda (i mutator-name)
                                   (and mutator-name #`(define (#,mutator-name r x) (mutate! r #,i x))))
                                 (range (length mutator-name*))
                                 mutator-name*)))))))

(define-syntax (define-record-type stx)
  (syntax-case stx ()
    ((_ constructor-name predicate-name . field-desc*)
     (mlet ((mutable? #f))
       (let ((field-desc*
               (map (lambda (stx)
                      (if (identifier? stx)
                          (cons stx #f)
                          (let ((fdesc (syntax->list stx)))
                            (case (length fdesc)
                              ((1) (cons (car fdesc) #f))
                              ((2) (set! mutable? #t) (cons (car fdesc) (cadr fdesc)))
                              (else (raise-parse-error "not a record field description" stx))))))
                    (syntax->list #'field-desc*))))
         #`(begin (define rtd (make-rtd 'constructor-name #,(length field-desc*) #,mutable?))
                  (define constructor-name (rtd-constructor rtd))
                  (define predicate-name   (rtd-predicate   rtd))
                  (define-record-type-accessor* rtd . #,(map car field-desc*))
                  (define-record-type-mutator*  rtd . #,(map cdr field-desc*))))))))

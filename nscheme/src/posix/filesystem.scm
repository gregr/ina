(define (imemory:file/k               path      kf k) (((current-posix-filesystem) 'open-imemory          path)      kf k))
(define (omemory:file/k               path mod  kf k) (((current-posix-filesystem) 'open-omemory          path mod)  kf k))
(define (iport:file/k                 path      kf k) (((current-posix-filesystem) 'open-iport            path)      kf k))
(define (oport:file/k                 path mod  kf k) (((current-posix-filesystem) 'open-oport            path mod)  kf k))
(define (current-directory/k                    kf k) (((current-posix-filesystem) 'current-directory)               kf k))
(define (file-change-evt/k            path      kf k) (((current-posix-filesystem) 'change-evt            path)      kf k))
(define (change-directory/k           path      kf k) (((current-posix-filesystem) 'change-directory      path)      kf k))
(define (directory-file*/k            path      kf k) (((current-posix-filesystem) 'list                  path)      kf k))
(define (make-symbolic-link/k         to path   kf k) (((current-posix-filesystem) 'make-symbolic-link    to path)   kf k))
(define (make-directory/k             path      kf k) (((current-posix-filesystem) 'make-directory        path)      kf k))
(define (move-file/k                  old new   kf k) (((current-posix-filesystem) 'move                  old new)   kf k))
(define (delete-file/k                path      kf k) (((current-posix-filesystem) 'delete-file           path)      kf k))
(define (delete-directory/k           path      kf k) (((current-posix-filesystem) 'delete-directory      path)      kf k))
(define (file-type/k                  path      kf k) (((current-posix-filesystem) 'type                  path)      kf k))
(define (file-size/k                  path      kf k) (((current-posix-filesystem) 'size                  path)      kf k))
(define (file-permissions/k           path      kf k) (((current-posix-filesystem) 'permissions           path)      kf k))
(define (file-modified-seconds/k      path      kf k) (((current-posix-filesystem) 'modified-seconds      path)      kf k))
(define (set-file-permissions!/k      path perm kf k) (((current-posix-filesystem) 'set-permissions!      path perm) kf k))
(define (set-file-modified-seconds!/k path sec  kf k) (((current-posix-filesystem) 'set-modified-seconds! path sec)  kf k))

(define (imemory:file path)     (imemory:file/k path     raise-io-error values))
(define (omemory:file path mod) (omemory:file/k path mod raise-io-error values))
(define (iport:file   path)     (iport:file/k path     raise-io-error values))
(define (oport:file   path mod) (oport:file/k path mod raise-io-error values))

(define (current-directory)          (current-directory/k          raise-io-error values))
(define (file-change-evt       path) (file-change-evt/k       path raise-io-error values))
(define (change-directory      path) (change-directory/k      path raise-io-error values))
(define (directory-file*       path) (directory-file*/k       path raise-io-error values))
(define (make-symbolic-link to path) (make-symbolic-link/k to path raise-io-error values))
(define (make-directory        path) (make-directory/k        path raise-io-error values))
(define (move-file          old new) (move-file/k          old new raise-io-error values))
(define (delete-file           path) (delete-file/k           path raise-io-error values))
(define (delete-directory      path) (delete-directory/k      path raise-io-error values))
(define (file-type             path) (file-type/k             path raise-io-error values))
(define (file-size             path) (file-size/k             path raise-io-error values))
(define (file-permissions      path) (file-permissions/k      path raise-io-error values))
(define (file-modified-seconds path) (file-modified-seconds/k path raise-io-error values))
(define (set-file-permissions! path permissions)
  (set-file-permissions!/k path permissions raise-io-error values))
(define (set-file-modified-seconds! path seconds)
  (set-file-modified-seconds!/k path seconds raise-io-error values))

(define (find-file name) (find-file/env (current-posix-environment) name))
(define (find-file/env env name)
  (find-file/PATH (let ((kv (assv #"PATH" env))) (if kv (cdr kv) #"")) name))
(define (find-file/PATH PATH name)
  (find-file/directory* (bytes-split PATH (bytes-ref #":" 0)) name))
(define (find-file/directory* dir* name)
  (define (element name) (cond ((string? name) (string->bytes name))
                                 ((symbol? name) (symbol->bytes name))
                                 (else           name)))
  (let ((name (element name)))
    (if (and (< 0 (bytes-length name))
             (let ((b0 (bytes-ref name 0)))
               (or (= b0 (bytes-ref #"." 0)) (= b0 (bytes-ref #"/" 0)))))
        name
        (ormap (lambda (dir) (let ((path (bytes-join #"/" dir name)))
                               (and (file-type/k path (lambda _ #f) values) path)))
               (map element dir*)))))

(splicing-let ((byte:/ (bytes-ref #"/" 0)))
  (define (path->bytes path)
    (if (text? path)
        (text->bytes path)
        (mistake 'path->bytes "not a symbol, string, or bytes" path)))
  (define (path-split path) (bytes-split (path->bytes path) byte:/))
  (define (path-directory path)
    (let* ((path (path->bytes path))
           (len  (bytes-length path)))
      (if (< 0 len)
          (let* ((base-end   (if (eqv? (bytes-ref path (- len 1)) byte:/) (- len 1) len))
                 (base-start ((bytes-index-end/byte byte:/) path base-end)))
            (if (< 0 base-start)
                (bytes-copy path 0 (- base-start 1))
                #"."))
          #".")))
  (define (path-base path)
    (let* ((path (path->bytes path))
           (len  (bytes-length path)))
      (if (< 0 len)
          (let* ((base-end   (if (eqv? (bytes-ref path (- len 1)) byte:/) (- len 1) len))
                 (base-start ((bytes-index-end/byte byte:/) path base-end)))
            (bytes-copy path base-start (- base-end base-start)))
          #"")))
  (define (path-append* p*)
    (bytes-join* #"/" (map (lambda (p) (bytes-rtrim1 (path->bytes p) byte:/)) p*)))
  (define (path-append . path*) (path-append* path*)))

(define (call-with-imemory:file path proc)
  (with-local-custodian
    (lambda ()
      (let ((in (imemory:file path)))
        (let-values ((x* (proc in)))
          (imemory-close in)
          (apply values x*))))))
(define (call-with-omemory:file path mod proc)
  (with-local-custodian
    (lambda ()
      (let ((out (omemory:file path mod)))
        (let-values ((x* (proc out)))
          (omemory-close out)
          (apply values x*))))))
(define (call-with-iport:file path proc)
  (with-local-custodian
    (lambda ()
      (let ((in (iport:file path)))
        (let-values ((x* (proc in)))
          (iport-close in)
          (apply values x*))))))
(define (call-with-oport:file path mod proc)
  (with-local-custodian
    (lambda ()
      (let ((out (oport:file path mod)))
        (let-values ((x* (proc out)))
          (oport-close out)
          (apply values x*))))))
(define call/imemory:file call-with-imemory:file)
(define call/omemory:file call-with-omemory:file)
(define call/iport:file call-with-iport:file)
(define call/oport:file call-with-oport:file)

(define (file->bytes path)
  (call-with-iport:file path (lambda (in)
                               ((iport->bytes/buffer-size (+ (file-size path) 4096)) in))))

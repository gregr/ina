(define program (make-program))
(define (link-definition* env def*) (program-parse-definition* program env def*))
(define env.common           (value-package->env package.common))
(define env.privileged       (env-conjoin* (value-package->env package.privileged)
                                           (value-package->env package.control)))
(define env.syntax           (value-package->env package.syntax))
(define env.tiny             (env-conjoin* env.minimal env.common))
(define env.tiny+privileged  (env-conjoin* env.tiny env.privileged))
(define env.base             (env-conjoin* env.tiny (link-definition* env.tiny+privileged def*.base)))
(define env.compiler         (link-definition* env.base def*.compiler))
(define env.nscheme          (let ((env.deps (env-conjoin* env.base env.syntax env.compiler)))
                               (env-conjoin* env.deps env.meta
                                             (link-definition* env.deps def*.nscheme))))
(define env.text             (link-definition* env.base def*.text))
(define env.large            (env-conjoin* env.nscheme env.text))
(define env.large+privileged (env-conjoin* env.large env.privileged))

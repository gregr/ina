(define (imemory:file path)             (imemory:file/k path             raise-io-error values))
(define (omemory:file path restriction) (omemory:file/k path restriction raise-io-error values))
(define (iport:file/k path kf k) (imemory:file/k path kf (lambda (im) (k (iport:memory im 0 #t)))))
(define (oport:file/k path restriction kf k)
  (let ((k (lambda (om) (omemory-size/k om kf (lambda (size) (k (oport:memory om size #t)))))))
    (omemory:file/k path restriction kf k)))
(define (iport:file path)             (iport:file/k path             raise-io-error values))
(define (oport:file path restriction) (oport:file/k path restriction raise-io-error values))

(define (change-directory      path) (change-directory/k      path raise-io-error values))
(define (directory-file*       path) (directory-file*/k       path raise-io-error values))
(define (make-symbolic-link to path) (make-symbolic-link/k to path raise-io-error values))
(define (make-directory        path) (make-directory/k        path raise-io-error values))
(define (move-file          old new) (move-file/k          old new raise-io-error values))
(define (delete-file           path) (delete-file/k           path raise-io-error values))
(define (delete-directory      path) (delete-directory/k      path raise-io-error values))
(define (file-type             path) (file-type/k             path raise-io-error values))
(define (file-size             path) (file-size/k             path raise-io-error values))
(define (file-permissions      path) (file-permissions/k      path raise-io-error values))
(define (file-modified-seconds path) (file-modified-seconds/k path raise-io-error values))
(define (set-file-permissions! path permissions)
  (set-file-permissions!/k path permissions raise-io-error values))
(define (set-file-modified-seconds! path seconds)
  (set-file-modified-seconds!/k path seconds raise-io-error values))

(define (find-file name) (find-file/env (host-environment) name))
(define (find-file/env env name)
  (find-file/PATH (let ((kv (assv #"PATH" env))) (if kv (cdr kv) #"")) name))
(define (find-file/PATH PATH name)
  (find-file/directory* (bytevector-split PATH (bytevector-ref #":" 0)) name))
(define (find-file/directory* dir* name)
  (define (element name) (cond ((string? name) (string->bytevector name))
                                 ((symbol? name) (symbol->bytevector name))
                                 (else           name)))
  (let ((name (element name)))
    (if (and (< 0 (bytevector-length name))
             (let ((b0 (bytevector-ref name 0)))
               (or (= b0 (bytevector-ref #"." 0)) (= b0 (bytevector-ref #"/" 0)))))
        name
        (ormap (lambda (dir) (let ((path (bytevector-join #"/" dir name)))
                               (and (file-type/k path (lambda _ #f) values) path)))
               (map element dir*)))))

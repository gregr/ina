(define (posix-raw-process/k in out err path arg* kf k)
  ((current-posix-raw-process/k) in out err path arg* (current-posix-environment) kf k))
(define (posix-process-in        p) (p 'in))
(define (posix-process-out       p) (p 'out))
(define (posix-process-err       p) (p 'err))
(define (posix-process-pid       p) (p 'pid))
(define (posix-process-wait      p) (p 'wait))
(define (posix-process-kill      p) (p 'kill))
(define (posix-process-interrupt p) (p 'interrupt))
(define (posix-process in out err path arg*)
  (posix-process/k in out err path arg* raise-io-error raise-io-error values))
(define (posix-process/k in out err path arg* handle-internal-error kf k)
  (define (x->fd x)
    (and x (let ((kv (assoc 'file-descriptor (port-describe x))))
             (and kv (cdr kv)))))
  (posix-raw-process/k
    (x->fd in) (x->fd out) (if (and err (or (eqv? out err) (eqv? err 'stdout))) 'stdout (x->fd err))
    path arg* kf
    (lambda (p)
      (let ((in.p  (posix-process-in  p))
            (out.p (posix-process-out p))
            (err.p (posix-process-err p)))
        (mlet ((fuse* '()))
          (define (fuse-io in out close!)
            (thread
              (lambda ()
                (let* ((buffer-size 4096) (buffer (make-mbytevector buffer-size 0)))
                  (let loop ()
                    (iport-read/k
                      in buffer 0 buffer-size handle-internal-error close!
                      (lambda (amount)
                        (oport-write/k out buffer 0 amount handle-internal-error loop))))))))
          (define (fuse*-push t) (set! fuse* (cons t fuse*)) #f)
          (define (fuse-input in out)
            (fuse-io in out (lambda () (oport-close/k out handle-internal-error values))))
          (define (fuse-output in out)
            (fuse*-push
              (fuse-io in out (lambda () (iport-close/k in handle-internal-error values)))))
          (let ((out (and out.p (if out (fuse-output out.p out) out.p)))
                (err (and err.p (if err (fuse-output err.p err) err.p)))
                (in  (and in.p
                          (if in
                              (let ((cust (make-custodian)))
                                (let ((t.in (current-custodian cust (lambda ()
                                                                      (fuse-input in in.p)))))
                                  (fuse*-push
                                    (thread
                                      (lambda ()
                                        (p 'wait)
                                        (custodian-shutdown-all cust)
                                        (oport-close/k in.p handle-internal-error values))))))
                              in.p))))
            (k (if (null? fuse*)
                   p
                   (mlet ((status #f))
                     (set! status (thread (lambda () (let ((exit-code (p 'wait)))
                                                       (for-each thread-wait fuse*)
                                                       (set! status exit-code)
                                                       (set! fuse* '())))))
                     (lambda (method)
                       (case method
                         ((in)   in)
                         ((out)  out)
                         ((err)  err)
                         ((wait) (let ((current status))
                                   (if (number? current) current (begin (thread-wait current)
                                                                        status))))
                         (else   (p method)))))))))))))

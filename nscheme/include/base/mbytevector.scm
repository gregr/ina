(define (mbytevector . args)
  (let ((x (make-mbytevector (length args) 0)))
    (let loop ((i 0) (args args))
      (cond ((null? args) x)
            (else         (mbytevector-set! x i (car args))
                          (loop (+ i 1) (cdr args)))))))

(define (mbytevector-fill! mbv v)
  (range-for-each (lambda (i) (mbytevector-set! mbv i v)) (mbytevector-length mbv)))

(define (mbytevector-copy! src start.src dst start.dst count)
  (unless (and (<= 0 start.dst) (<= (+ start.dst count) (mbytevector-length dst)))
    (error "mbytevector-copy! destination range is out of bounds" start.dst count
           (mbytevector-length dst)))
  (define (go ref len.src)
    (unless (and (<= 0 start.src) (<= (+ start.src count) len.src))
      (error "mbytevector-copy! source range is out of bounds" start.src count len.src))
    (range-for-each (lambda (i) (mbytevector-set! dst (+ start.dst i) (ref src (+ start.src i))))
                    0 count))
  (cond ((mbytevector? src) (go mbytevector-ref (mbytevector-length src)))
        ((bytevector? src)  (go bytevector-ref (bytevector-length src)))
        (else               (error "not a bytevector or mbytevector" src))))

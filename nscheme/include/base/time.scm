(define (sleep sec)
  (let ((denom (denominator sec)))
    (let-values (((whole-seconds rem) (integer-floor-divmod (numerator sec) denom)))
      (sleep-seconds-nanoseconds whole-seconds (integer-floor-div (* rem 1000000000) denom)))))

(define current-time-utc                    (current-time/type 'utc))
(define current-time-monotonic              (current-time/type 'monotonic))
(define current-time-process                (current-time/type 'process))
(define current-time-thread                 (current-time/type 'thread))
(define current-time-garbage-collector-cpu  (current-time/type 'garbage-collector-cpu))
(define current-time-garbage-collector-real (current-time/type 'garbage-collector-real))

(define (current-whole-seconds-utc) (let-values (((sec nsec) (current-time-utc))) sec))
(define ((current-seconds/current-time current-time))
  (let-values (((sec nsec) (current-time))) (+ sec (/ nsec 1000000000))))
(define ((current-nanoseconds/current-time current-time))
  (let-values (((sec nsec) (current-time))) (+ (* sec 1000000000) nsec)))
(define current-seconds-utc                        (current-seconds/current-time     current-time-utc))
(define current-seconds-monotonic                  (current-seconds/current-time     current-time-monotonic))
(define current-seconds-process                    (current-seconds/current-time     current-time-process))
(define current-seconds-thread                     (current-seconds/current-time     current-time-thread))
(define current-seconds-garbage-collector-cpu      (current-seconds/current-time     current-time-garbage-collector-cpu))
(define current-seconds-garbage-collector-real     (current-seconds/current-time     current-time-garbage-collector-real))
(define current-nanoseconds-utc                    (current-nanoseconds/current-time current-time-utc))
(define current-nanoseconds-monotonic              (current-nanoseconds/current-time current-time-monotonic))
(define current-nanoseconds-process                (current-nanoseconds/current-time current-time-process))
(define current-nanoseconds-thread                 (current-nanoseconds/current-time current-time-thread))
(define current-nanoseconds-garbage-collector-cpu  (current-nanoseconds/current-time current-time-garbage-collector-cpu))
(define current-nanoseconds-garbage-collector-real (current-nanoseconds/current-time current-time-garbage-collector-real))

(define (with-nanoseconds yield thunk)
  (define (delta name t1 t0) (cons name (- t1 t0)))
  (let ((t0.cpu     (current-nanoseconds-thread))
        (t0.real    (current-nanoseconds-monotonic))
        (t0.gc-cpu  (current-nanoseconds-garbage-collector-cpu))
        (t0.gc-real (current-nanoseconds-garbage-collector-real)))
    (let-values ((x* (thunk)))
      (let ((t1.cpu     (current-nanoseconds-thread))
            (t1.real    (current-nanoseconds-monotonic))
            (t1.gc-cpu  (current-nanoseconds-garbage-collector-cpu))
            (t1.gc-real (current-nanoseconds-garbage-collector-real)))
        (yield (list (delta 'cpu     t1.cpu     t0.cpu)
                     (delta 'real    t1.real    t0.real)
                     (delta 'gc-cpu  t1.gc-cpu  t0.gc-cpu)
                     (delta 'gc-real t1.gc-real t0.gc-real)))
        (apply values x*)))))
(define (with-milliseconds yield thunk)
  (with-nanoseconds
    (lambda (kv*)
      (yield (map (lambda (kv) (cons (car kv) (integer-floor-div (cdr kv) 1000000))) kv*)))
    thunk))

(define (sleep-seconds-nanoseconds s ns) ((current-sleep-seconds-nanoseconds) s ns))
(define (sleep sec)
  (let ((denom (denominator sec)))
    (let-values (((whole-seconds rem) (integer-floor-divmod (numerator sec) denom)))
      (sleep-seconds-nanoseconds whole-seconds (integer-floor-div (* rem 1000000000) denom)))))

(define (time/type type) ((current-time/type) type))
(define time-utc                    (time/type 'utc))
(define time-monotonic              (time/type 'monotonic))
(define time-process                (time/type 'process))
(define time-thread                 (time/type 'thread))
(define time-garbage-collector-cpu  (time/type 'garbage-collector-cpu))
(define time-garbage-collector-real (time/type 'garbage-collector-real))

(define (whole-seconds-utc)       (let-values (((sec nsec) (time-utc))) sec))
(define ((seconds/time     time)) (let-values (((sec nsec) (time))) (+ sec (/ nsec 1000000000))))
(define ((nanoseconds/time time)) (let-values (((sec nsec) (time))) (+ (* sec 1000000000) nsec)))
(define seconds-utc                        (seconds/time     time-utc))
(define seconds-monotonic                  (seconds/time     time-monotonic))
(define seconds-process                    (seconds/time     time-process))
(define seconds-thread                     (seconds/time     time-thread))
(define seconds-garbage-collector-cpu      (seconds/time     time-garbage-collector-cpu))
(define seconds-garbage-collector-real     (seconds/time     time-garbage-collector-real))
(define nanoseconds-utc                    (nanoseconds/time time-utc))
(define nanoseconds-monotonic              (nanoseconds/time time-monotonic))
(define nanoseconds-process                (nanoseconds/time time-process))
(define nanoseconds-thread                 (nanoseconds/time time-thread))
(define nanoseconds-garbage-collector-cpu  (nanoseconds/time time-garbage-collector-cpu))
(define nanoseconds-garbage-collector-real (nanoseconds/time time-garbage-collector-real))

(define (with-nanoseconds yield thunk)
  (define (delta name t1 t0) (cons name (- t1 t0)))
  (let ((t0.cpu     (nanoseconds-thread))
        (t0.real    (nanoseconds-monotonic))
        (t0.gc-cpu  (nanoseconds-garbage-collector-cpu))
        (t0.gc-real (nanoseconds-garbage-collector-real)))
    (let-values ((x* (thunk)))
      (let ((t1.cpu     (nanoseconds-thread))
            (t1.real    (nanoseconds-monotonic))
            (t1.gc-cpu  (nanoseconds-garbage-collector-cpu))
            (t1.gc-real (nanoseconds-garbage-collector-real)))
        (yield (list (delta 'cpu     t1.cpu     t0.cpu)
                     (delta 'real    t1.real    t0.real)
                     (delta 'gc-cpu  t1.gc-cpu  t0.gc-cpu)
                     (delta 'gc-real t1.gc-real t0.gc-real)))
        (apply values x*)))))
(define (with-milliseconds yield thunk)
  (with-nanoseconds
    (lambda (kv*)
      (yield (map (lambda (kv) (cons (car kv) (integer-floor-div (cdr kv) 1000000))) kv*)))
    thunk))

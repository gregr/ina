(define (sleep-seconds-nanoseconds s ns) ((current-sleep-seconds-nanoseconds) s ns))
(define (sleep sec)
  (let ((denom (denominator sec)))
    (let-values (((whole-seconds rem) (integer-floor-divmod (numerator sec) denom)))
      (sleep-seconds-nanoseconds whole-seconds (integer-floor-div (* rem 1000000000) denom)))))

(define (seconds-nanoseconds/type type) ((current-seconds-nanoseconds/type) type))
(define ((seconds/seconds-nanoseconds     sns)) (let-values (((s ns) (sns))) (+ s (/ ns 1000000000))))
(define ((nanoseconds/seconds-nanoseconds sns)) (let-values (((s ns) (sns))) (+ (* s 1000000000) ns)))
;; NOTE: for security, we are intentionally deferring, and not caching the result of, the call to
;; (seconds-nanoseconds/type type) to ensure we always use the local platform capability.
(define ((seconds/type     type)) ((seconds/seconds-nanoseconds     (seconds-nanoseconds/type type))))
(define ((nanoseconds/type type)) ((nanoseconds/seconds-nanoseconds (seconds-nanoseconds/type type))))
(define (whole-seconds-utc)       (let-values (((s ns) ((seconds-nanoseconds/type 'utc)))) s))
(define seconds-utc                        (seconds/type     'utc))
(define seconds-monotonic                  (seconds/type     'monotonic))
(define seconds-process                    (seconds/type     'process))
(define seconds-thread                     (seconds/type     'thread))
(define seconds-garbage-collector-cpu      (seconds/type     'garbage-collector-cpu))
(define seconds-garbage-collector-real     (seconds/type     'garbage-collector-real))
(define nanoseconds-utc                    (nanoseconds/type 'utc))
(define nanoseconds-monotonic              (nanoseconds/type 'monotonic))
(define nanoseconds-process                (nanoseconds/type 'process))
(define nanoseconds-thread                 (nanoseconds/type 'thread))
(define nanoseconds-garbage-collector-cpu  (nanoseconds/type 'garbage-collector-cpu))
(define nanoseconds-garbage-collector-real (nanoseconds/type 'garbage-collector-real))

(define (with-nanoseconds yield thunk)
  (define (delta name t1 t0) (cons name (- t1 t0)))
  ;; Unlike the global variants defined outside, it is not insecure for these to cache because the
  ;; local platform capability does not escape this scope.
  (define seconds-nanoseconds/type (current-seconds-nanoseconds/type))
  (define (nanoseconds/type type) (nanoseconds/seconds-nanoseconds (seconds-nanoseconds/type type)))
  (let ((nanoseconds-thread                 (nanoseconds/type 'thread))
        (nanoseconds-monotonic              (nanoseconds/type 'monotonic))
        (nanoseconds-garbage-collector-cpu  (nanoseconds/type 'garbage-collector-cpu))
        (nanoseconds-garbage-collector-real (nanoseconds/type 'garbage-collector-real)))
    (let ((t0.cpu     (nanoseconds-thread))
          (t0.real    (nanoseconds-monotonic))
          (t0.gc-cpu  (nanoseconds-garbage-collector-cpu))
          (t0.gc-real (nanoseconds-garbage-collector-real)))
      (let-values ((x* (thunk)))
        (let ((t1.cpu     (nanoseconds-thread))
              (t1.real    (nanoseconds-monotonic))
              (t1.gc-cpu  (nanoseconds-garbage-collector-cpu))
              (t1.gc-real (nanoseconds-garbage-collector-real)))
          (yield (list (delta 'cpu     t1.cpu     t0.cpu)
                       (delta 'real    t1.real    t0.real)
                       (delta 'gc-cpu  t1.gc-cpu  t0.gc-cpu)
                       (delta 'gc-real t1.gc-real t0.gc-real)))
          (apply values x*))))))
(define (with-milliseconds yield thunk)
  (with-nanoseconds
    (lambda (kv*)
      (yield (map (lambda (kv) (cons (car kv) (integer-floor-div (cdr kv) 1000000))) kv*)))
    thunk))

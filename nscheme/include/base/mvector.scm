(define (mvector . args)
  (let ((x (make-mvector (length args) 0)))
    (let loop ((i 0) (args args))
      (cond ((null? args) x)
            (else         (mvector-set! x i (car args))
                          (loop (+ i 1) (cdr args)))))))

(define (mvector-fill! mv v)
  (range-for-each (lambda (i) (mvector-set! mv i v)) (mvector-length mv)))

(define (mvector-copy! src start.src dst start.dst count)
  (unless (and (<= 0 start.dst) (<= (+ start.dst count) (mvector-length dst)))
    (error "mvector-copy! destination range is out of bounds" start.dst count
           (mvector-length dst)))
  (define (go ref len.src)
    (unless (and (<= 0 start.src) (<= (+ start.src count) len.src))
      (error "mvector-copy! source range is out of bounds" start.src count len.src))
    (range-for-each (lambda (i) (mvector-set! dst (+ start.dst i) (ref src (+ start.src i))))
                    0 count))
  (cond ((mvector? src) (go mvector-ref (mvector-length src)))
        ((vector? src)  (go vector-ref (vector-length src)))
        (else           (error "not a vector or mvector" src))))

(define (mvector . args)
  (let ((x (make-mvector (length args) 0)))
    (let loop ((i 0) (args args))
      (cond ((null? args) x)
            (else         (mvector-set! x i (car args))
                          (loop (+ i 1) (cdr args)))))))

(define (mvector-fill! mv v)
  (range-for-each (lambda (i) (mvector-set! mv i v)) (mvector-length mv)))

(define (mvector-copy! mv start src start.src end.src)
  (unless (<= 0 start)           (error "destination start is less than 0" start))
  (unless (<= 0 start.src)       (error "source start is less than 0" start.src))
  (unless (<= start.src end.src) (error "source start is greater than end" start.src end.src))
  (let ((end (+ (- end.src start.src) start)))
    (unless (<= end (mvector-length mv))
      (error "destination end is larger than length" end (mvector-length mv)))
    (define (go ref len.src)
      (unless (<= end.src len.src)
        (error "source end is larger than length" end.src len.src))
      (range-for-each (lambda (i) (mvector-set! mv i (ref src (+ start.src i)))) start end))
    (cond ((mvector? src) (go mvector-ref (mvector-length src)))
          ((vector? src)  (go vector-ref (vector-length src)))
          (else           (error "not a vector or mvector" src)))))

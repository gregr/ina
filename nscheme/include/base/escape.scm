(define (with-escape-prompt on-escape proc)
  (let* ((cust      (make-custodian))
         (ch.return (make-channel))
         (escape    (lambda (x)
                      (channel-put ch.return (lambda () (on-escape x)))
                      (thread-wait (current-thread))))
         (t         (current-custodian
                      cust
                      (lambda ()
                        (let ((parent (current-thread)))
                          (thread (lambda () (thread-wait parent) (custodian-shutdown-all cust))))
                        (thread (lambda ()
                                  (let-values ((x* (proc escape)))
                                    (channel-put ch.return (lambda () (apply values x*)))))))))
         (^return   (channel-get ch.return)))
    (custodian-shutdown-all cust)
    (^return)))

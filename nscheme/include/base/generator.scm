(define (make-generator done-value yield->proc)
  (mlet ((ch.reply.current #f))
    (let* ((ch.in (make-channel))
           (yield (lambda (x)
                    (let ((ch.reply ch.reply.current))
                      (set! ch.reply.current #f)
                      (thread (lambda () (channel-put ch.reply x))))
                    (let ((ch.reply&x (channel-get ch.in)))
                      (set! ch.reply.current (car ch.reply&x))
                      (cdr ch.reply&x))))
           (t     (thread
                    (lambda ()
                      (let ((proc (yield->proc yield)) (ch.reply&x (channel-get ch.in)))
                        (set! ch.reply.current (car ch.reply&x))
                        (proc (cdr ch.reply&x))
                        (let loop () (yield done-value) (loop))))))
           (dead  (handle-evt (thread-dead-evt t) (lambda (_) (error "dead generator")))))
      (lambda (x)
        (let ((ch.reply (make-channel)))
          (sync (channel-put-evt ch.in (cons ch.reply x)) dead)
          (sync ch.reply dead))))))

(define (make-generator done-value yield->proc)
  (mlet ((ch.out #f))
    (let* ((ch.in (make-channel))
           (yield (lambda (x)
                    (let ((ch ch.out))
                      (set! ch.out #f)
                      (thread (lambda () (channel-put ch x))))
                    (let ((out&x (channel-get ch.in)))
                      (set! ch.out (car out&x))
                      (cdr out&x))))
           (t     (thread/suspend-to-kill
                    (lambda ()
                      (let ((proc (yield->proc yield)) (out&x (channel-get ch.in)))
                        (set! ch.out (car out&x))
                        (proc (cdr out&x))
                        (let loop () (yield done-value) (loop)))))))
      (lambda (x)
        (thread-resume t (current-thread))
        (let ((ch (make-channel)))
          (channel-put ch.in (cons ch x))
          (channel-get ch))))))

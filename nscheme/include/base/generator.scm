(define (make-generator done-value yield->proc)
  (mlet ((reply.current #f))
    (let* ((ch.in (make-channel))
           (yield (lambda (x)
                    (let ((reply reply.current))
                      (set! reply.current #f)
                      (reply x))
                    (let ((reply&x (channel-get ch.in)))
                      (set! reply.current (car reply&x))
                      (cdr reply&x))))
           (t     (thread/suspend-to-kill
                    (lambda ()
                      (let ((proc (yield->proc yield)) (reply&x (channel-get ch.in)))
                        (set! reply.current (car reply&x))
                        (proc (cdr reply&x))
                        (let loop () (yield done-value) (loop)))))))
      (lambda (x)
        (let* ((ch    (make-channel))
               (self  (current-thread))
               (reply (lambda (x)
                        (let ((t (thread/suspend-to-kill (lambda () (channel-put ch x)))))
                          (thread-resume t self)))))
          (thread-resume t self)
          (channel-put ch.in (cons reply x))
          (channel-get ch))))))

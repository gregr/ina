#lang racket/base
(provide (rename-out (nscm:printf       printf)
                     (nscm:file-exists? file-exists?)
                     (nscm:eof?         eof?)
                     (nscm:read         read)
                     (nscm:read*/string read*/string)
                     (nscm:read*/file   read*/file)
                     (nscm:write        write)
                     (nscm:write/file   write/file)))
(require "interop.rkt" racket/port)

;; TODO: eventually replace these with lower level file capabilities.
(define (nscm:printf . args)
  (apply printf args) (flush-output (current-output-port)) #t)
(define (nscm:file-exists? p) (file-exists? (path:ns->s p)))
(define (nscm:eof?)           (eof-object? (peek-byte)))
(define (nscm:read)           (let ((datum (read)))
                                (if (eof-object? datum) #t (s->ns datum))))
(define (nscm:read*/string s) (s->ns (call-with-input-string s read*)))
(define (nscm:read*/file p)   (s->ns (read*/file (path:ns->s p))))
(define (nscm:write d)        (writeable?! d) (write (racket-datum d))     #t)
(define (nscm:write/file p d) (write/file (path:ns->s p) (racket-datum d)) #t)

((provide tmap:empty tmap->alist alist->tmap
          tmap-count tmap-union tmap-intersection tmap-difference
          tmap-ref tmap-get tmap-add tmap-discard)
 (require test))

(define shift-size    4)
(define branch-size   (arithmetic-shift 1 shift-size))
(define local-mask    (- branch-size 1))
(define rshift-size   (* -1 shift-size))
(define (local-i i)   (bitwise-and i local-mask))
(define (shift-i i)   (arithmetic-shift i rshift-size))
(define (unshift-i i) (arithmetic-shift i shift-size))

(define (empty? t)  (null? t))
(define (leaf? t)   (pair? t))
(define (leaf i v)  (cons i v))
(define (leaf-i l)  (car l))
(define (leaf-v l)  (cdr l))
(define (branch? t) (vector? t))
(define (branch:single i0 v0)
  (define result (make-mvector branch-size '()))
  (mvector-set! result i0 v0)
  (mvector->vector result))
(define (branch-ref b i) (vector-ref b i))
(define (branch-add b i v)
  (define result (make-mvector branch-size '()))
  (let copy ((ci (- branch-size 1)))
    (mvector-set! result ci (vector-ref b ci))
    (cond ((= ci 0) (mvector-set! result i v) (mvector->vector result))
          (#t       (copy (- ci 1))))))
(define (list->branch ts)
  (define non-empty (filter-not empty? ts))
  (define count     (length non-empty))
  (cond ((= 0 count) tmap:empty)
        ((and (= 1 count) (leaf? (car non-empty)))
         (define (ul i t)
           (if (empty? t) t (leaf (+ (unshift-i (leaf-i t)) i) (leaf-v t))))
         (car (filter leaf? (map ul (range (length ts)) ts))))
        (#t (list->vector ts))))

(define tmap:empty '())
(define (tmap->alist trie)
  (define (lift i t)
    (map (lambda (kv) (cons (+ (unshift-i (car kv)) i) (cdr kv)))
         (tmap->alist t)))
  (cond ((branch? trie) (apply append (map lift (range branch-size)
                                           (vector->list trie))))
        ((leaf? trie)   (list trie))
        (#t             '())))
(define (alist->tmap alist)
  (foldl (lambda (kv t) (tmap-add t (car kv) (cdr kv))) tmap:empty alist))
(define (tmap-count trie)
  (cond ((branch? trie)
         (let loop ((ci 0) (sz 0))
           (if (= branch-size ci) sz
             (loop (+ ci 1) (+ sz (tmap-count (branch-ref trie ci)))))))
        ((leaf? trie) 1)
        (#t           0)))
(define (tmap-union merge a b)
  (let loop ((m merge) (rm (lambda (x y) (merge y x))) (a a) (b b))
    (cond ((empty? a) b)
          ((empty? b) a)
          ((branch? a)
           (cond ((branch? b)
                  (list->vector (map (lambda (a b) (loop m rm a b))
                                     (vector->list a) (vector->list b))))
                 (#t (define li (local-i (leaf-i b)))
                  (define l:b (leaf (shift-i (leaf-i b)) (leaf-v b)))
                  (branch-add a li (loop m rm (branch-ref a li) l:b)))))
          ((branch? b) (loop rm m b a))
          ((equal? (leaf-i a) (leaf-i b))
           (leaf (leaf-i a) (m (leaf-v a) (leaf-v b))))
          (#t (let* ((i:a (leaf-i a)) (l:a (leaf (shift-i i:a) (leaf-v a))))
                (loop m rm (branch:single (local-i i:a) l:a) b))))))
(define (tmap-intersection merge a b)
  (let loop ((m merge) (rm (lambda (x y) (merge y x))) (a a) (b b))
    (cond ((or (empty? a) (empty? b)) tmap:empty)
          ((branch? a)
           (cond ((branch? b) (list->branch
                                (map (lambda (a b) (loop m rm a b))
                                     (vector->list a) (vector->list b))))
                 (#t (define i (leaf-i b))
                  (define new (loop m rm (branch-ref a (local-i i))
                                    (leaf (shift-i i) (leaf-v b))))
                  (if (leaf? new) (leaf i (leaf-v new)) tmap:empty))))
          ((branch? b) (loop rm m b a))
          ((equal? (leaf-i a) (leaf-i b))
           (leaf (leaf-i a) (m (leaf-v a) (leaf-v b))))
          (#t tmap:empty))))
(define (tmap-difference a b)
  (cond ((or (empty? a) (empty? b)) a)
        ((branch? a)
         (cond ((branch? b) (list->branch
                              (map tmap-difference
                                   (vector->list a) (vector->list b))))
               (#t (define i (leaf-i b))
                (tmap-difference
                  a (branch:single (local-i i) (leaf (shift-i i) #t))))))
        ((branch? b) (define i (leaf-i a))
                     (tmap-difference
                       (branch:single (local-i i)
                                      (leaf (shift-i i) (leaf-v a))) b))
        ((equal? (leaf-i a) (leaf-i b)) tmap:empty)
        (#t a)))
(define (tmap-find trie i)
  (tmap-intersection (lambda (a b) a) trie (leaf i #t)))
(define (tmap-ref trie i)
  (define result (tmap-find trie i))
  (if (leaf? result) (leaf-v result) (error '"tmap-ref of missing index:" i)))
(define (tmap-get trie i default)
  (define result (tmap-find trie i))
  (if (leaf? result) (leaf-v result) default))
(define (tmap-add trie i v) (tmap-union (lambda (a b) b) trie (leaf i v)))
(define (tmap-discard trie i) (tmap-difference trie (leaf i #t)))

(when test
  ;; TODO: move sort/k to another module.
  (define (sort/k xs)
    (define (list-odds xs)
      (if (null? xs) '()
        (cons (car xs) (if (null? (cdr xs)) '() (list-odds (cddr xs))))))
    (define (list-merge/k a b)
      (cond ((null? a)              b)
            ((null? b)              a)
            ((<= (caar a) (caar b)) (cons (car a) (list-merge/k (cdr a) b)))
            (#t                     (cons (car b) (list-merge/k a (cdr b))))))
    (if (or (null? xs) (null? (cdr xs))) xs
      (list-merge/k (sort/k (list-odds xs)) (sort/k (list-odds (cdr xs))))))

  (test 'sort/k-1
    (sort/k '((1 . a) (4 . d) (3 . c) (2 . b) (5 . e)))
    '((1 . a) (2 . b) (3 . c) (4 . d) (5 . e)))

  (test 'tmap-identity-1
    (sort/k (tmap->alist (alist->tmap '((0 . a) (1 . b) (2 . c) (17 . d) (18 . e)))))
    '((0 . a) (1 . b) (2 . c) (17 . d) (18 . e)))

  (test 'tmap-replace-1
    (sort/k (tmap->alist (alist->tmap '((0 . a) (1 . b) (2 . c) (17 . d) (18 . e) (0 . z)))))
    '((0 . z) (1 . b) (2 . c) (17 . d) (18 . e)))

  (test 'tmap-discard-1
    (sort/k (tmap->alist (tmap-discard (alist->tmap '((0 . a) (1 . b) (2 . c) (17 . d) (18 . e))) 2)))
    '((0 . a) (1 . b) (17 . d) (18 . e)))
  (test 'tmap-discard-2
    (sort/k (tmap->alist (tmap-discard (alist->tmap '((0 . a) (1 . b) (2 . c) (17 . d) (18 . e))) 18)))
    '((0 . a) (1 . b) (2 . c) (17 . d)))

  (test 'tmap-count-1
    (tmap-count (alist->tmap '((0 . a) (1 . b) (2 . c) (17 . d) (18 . e))))
    5)
  (test 'tmap-count-2
    (tmap-count (alist->tmap '((0 . a) (1 . b) (2 . c) (17 . d) (18 . e) (0 . z))))
    5)

  (test 'tmap-get-1
    (tmap-get (alist->tmap '((0 . a) (1 . b) (2 . c) (17 . d) (18 . e))) 3 'missing)
    'missing)

  (test 'tmap-ref-1
    (tmap-ref (alist->tmap '((0 . a) (1 . b) (2 . c) (17 . d) (18 . e))) 1)
    'b)
  (test 'tmap-ref-2
    (tmap-ref (alist->tmap '((0 . a) (1 . b) (2 . c) (17 . d) (18 . e))) 17)
    'd)
  )

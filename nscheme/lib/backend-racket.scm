((provide ast->racket-datum)
 (require ast-elaborate))

(define (~map f ~xs)
  (cond ((pair? ~xs) (cons (f (car ~xs)) (~map f (cdr ~xs))))
        ((null? ~xs) '())
        (#t (f ~xs))))
(define (vsym p) (string-append 'v. p))

(define (ast->racket-datum ast)
  (define alen          (- (vector-length ast) 1))
  (define (@ i)         (vector-ref ast i))
  (define (@^ i)        (ast->racket-datum (@ i)))
  (define (? tag)       (equal? tag (@ 0)))
  (define (binding n a) (list (vsym n) (ast->racket-datum a)))
  (define (body e)      (if (and (pair? e) (equal? 'begin (car e)))
                          (cdr e) (list e)))
  ;; Assume: set! param is a name; lambda param and apply arg are lists.
  ;; TODO: simplify quote when possible.
  (cond ((? 'quote ) (list 'quote (@ 1)))
        ((? 'var   ) (vsym (@ 1)))
        ((? 'set!  ) (list 'set! (vsym (@ 1)) (@^ 2)))
        ((? 'if    ) (list 'if (@^ 1) (@^ 2) (@^ 3)))
        ((? 'apply ) (cons (@^ 1) (map ast->racket-datum (@ 2))))
        ((? 'lambda) (list* 'lambda (~map vsym (@ 1)) (body (@^ 2))))
        ((? 'prim  ) (cons (@ 1) (map ast->racket-datum (@ 2))))
        ((? 'begin ) (cons 'begin (append (map ast->racket-datum (@ 1))
                                          (ast->racket-datum (@ 2)))))
        ((or (? 'let) (? 'letrec))
         (list* (@ 0) (map binding (@ 1) (@ 2)) (body (@^ 3))))
        (#t (error '"unknown ast:" ast))))

(provide ast:quote ast:var ast:set! ast:if ast:apply ast:lambda
         ast:reset ast:shift ast:prim eval/ast test!)

(require type-predicates primitive-ops)

;; Runtime environments
(define env:empty '())
(define (env-extend* env b*)
  (foldl (lambda (b e)
           (define cell    (make-mvector 1 (cdr b)))
           (define (get)   (mvector-ref  cell 0))
           (define (set v) (mvector-set! cell 0 v))
           (cons (cons (car b) (cons get set)) e)) env b*))
(define (env-ref-capabilities env addr)
  (define rib (assoc addr env))
  (if rib (cdr rib) (error '"unbound address:" addr)))
(define (env-ref env addr)    ((car (env-ref-capabilities env addr))))
(define (env-set! env addr v) ((cdr (env-ref-capabilities env addr)) v))

;; Primitive operations
(define primitive-op-procs
  (list (cons 'mvector?        mvector?)
        (cons 'vector?         vector?)
        (cons 'pair?           pair?)
        (cons 'null?           null?)
        (cons 'string?         string?)
        (cons 'number?         number?)
        (cons 'integer?        integer?)
        (cons 'boolean?        boolean?)
        (cons 'procedure?      procedure?)
        (cons 'boolean=?       boolean=?)
        (cons 'number=?        eqv?)
        (cons 'string=?        string=?)
        (cons 'mvector=?       mvector=?)
        (cons 'procedure=?     procedure=?)
        (cons 'string->vector  string->vector)
        (cons 'vector->string  vector->string)
        (cons 'cons            cons)
        (cons 'car             car)
        (cons 'cdr             cdr)
        (cons 'vector-ref      vector-ref)
        (cons 'vector-length   vector-length)
        (cons 'make-mvector    make-mvector)
        (cons 'mvector->vector mvector->vector)
        (cons 'mvector-set!    mvector-set!)
        (cons 'mvector-ref     mvector-ref)
        (cons 'mvector-length  mvector-length)
        (cons '=               =)
        (cons '<=              <=)
        (cons '<               <)
        (cons '+               +)
        (cons '*               *)
        (cons '-               -)
        (cons '/               /)))

(define primitive-op-evaluators
  (map (lambda (po-desc)
         (define name (car po-desc))
         (define arg-sig (cadr po-desc))
         (define return-sig (caddr po-desc))  ;; TODO: validate return type?
         (define op (cdr (assoc name primitive-op-procs)))
         (define (valid? a*)
           (andmap (lambda (ty? a)
                     (or (not ty?) ((cdr (assoc ty? type-predicates)) a)))
                   arg-sig a*))
         (define (full-op a*)
           (if (valid? a*) (apply op a*)
             (error '"primitive op type error:" name arg-sig a*)))
         (cons name full-op)) primitive-ops))

(define (ast:quote datum)    (lambda (env) datum))
(define (ast:var address)    (lambda (env) (env-ref env address)))
(define (ast:set! addr v)    (lambda (env) (env-set! env addr (v env))))
(define (ast:if c t f)       (lambda (env) (if (c env) (t env) (f env))))
(define (ast:apply proc arg) (lambda (env) (apply (proc env) (arg env))))
(define (ast:reset body)     (lambda (env) (reset (body env))))
(define (ast:shift proc)     (lambda (env) (shift k ((proc env) k))))
(define (ast:lambda ~p?* body)
  (lambda (env)
    (lambda ~a*
      (define (fail) (error '"arity mismatch:" ~p?* ~a*))
      (define b*
        (let loop ((~p?* ~p?*) (~a* ~a*))
          (cond ((pair? ~p?*)
                 (unless (pair? ~a*) (fail))
                 (define b* (loop (cdr ~p?*) (cdr ~a*)))
                 (if (car ~p?*) (cons (cons (car ~p?*) (car ~a*)) b*) b*))
                ((null? ~p?*) (unless (null? ~a*) (fail)) '())
                (~p?*         (list (cons ~p?* ~a*)))
                (#t           '()))))
      (body (env-extend* env b*)))))
(define (ast:prim name a*)
  (define op (cdr (or (assoc name primitive-op-evaluators)
                      (error '"invalid primitive op:" name))))
  (lambda (env) (op (map (lambda (a) (a env)) a*))))

(define (eval/ast ast)
  ((let loop ((ast ast))
     (define (@ i) (vector-ref ast i)) (define (? tag) (equal? (@ 0) tag))
     (if (procedure? ast) ast
       (cond ((? 'quote)   (ast:quote (@ 1)))
             ((? 'var)     (ast:var (@ 1)))
             ((? 'set!)    (ast:set! (@ 1) (loop (@ 2))))
             ((? 'if)      (ast:if (loop (@ 1)) (loop (@ 2)) (loop (@ 3))))
             ((? 'apply)   (ast:apply (loop (@ 1)) (loop (@ 2))))
             ((? 'lambda)  (ast:lambda (@ 1) (loop (@ 2))))
             ((? 'reset)   (ast:reset (loop (@ 1))))
             ((? 'shift)   (ast:shift (loop (@ 1))))
             ((? 'prim)    (ast:prim (@ 1) (map loop (@ 2))))
             (#t           (error '"unknown ast:" ast))))) env:empty))

(define (test! test)
  (test 'ast:quote
    ((ast:quote 7) env:empty)
    7)
  (test 'ast:if-1
    ((ast:if (ast:quote #t) (ast:quote 1) (ast:quote 2)) env:empty)
    1)
  (test 'ast:if-2
    ((ast:if (ast:quote #f) (ast:quote 1) (ast:quote 2)) env:empty)
    2)

  (test 'quote
    (eval/ast '#(quote 7))
    7)
  (test 'if-1
    (eval/ast '#(if #(quote #t) #(quote 1) #(quote 2)))
    1)
  (test 'if-2
    (eval/ast '#(if #(quote #f) #(quote 1) #(quote 2)))
    2))

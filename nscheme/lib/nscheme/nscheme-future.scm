(provide test!)

(require eval/ast nscheme:expand)

(define (ev form) (eval/ast (nscheme:expand form)))

(define (test! test)
  (test 'qq-1
    (ev '`one)
    'one)
  (test 'qq-2
    (ev '`((a 1) (b 2)))
    '((a 1) (b 2)))
  (test 'qq-3
    (ev '`((a 1) ,(cons 'b `(3))))
    '((a 1) (b 3)))
  (test 'qq-4
    (ev '`(1 `,(cons 2 3) ,(cons 4 5) `(,(cons 6 ,(cons 7 8))) 100))
    `(1 `,(cons 2 3) ,(cons 4 5) `(,(cons 6 ,(cons 7 8))) 100))
  (test 'qq-5
    (ev '`(1 ,@(cons 2 (cons 3 '())) 4))
    '(1 2 3 4))
  (test 'qq-6
    (ev '`#(1 ,(cons 2 (cons 3 '())) 4))
    '#(1 (2 3) 4))
  (test 'qq-7
    (ev '`#(1 ,@(cons 2 (cons 3 '())) 4))
    '#(1 2 3 4))

  (test 'case-1
    (ev '(case 3 (else 'ok)))
    'ok)
  (test 'case-2
    (ev '(case 3
           ((4) 'four)
           (((3 4)) 'multiple)
           ((3) 'three)
           ((foo bar) 'foobar)
           (else 'fail)))
    'three)
  (test 'case-3
    (ev '(case 'foo
           ((4) 'four)
           (((3 4)) 'multiple)
           ((3) 'three)
           ((foo bar) 'foobar)
           (else 'fail)))
    'foobar)
  (test 'case-4
    (ev '(case 'bar
           ((4) 'four)
           (((3 4)) 'multiple)
           ((3) 'three)
           ((foo bar) 'foobar)
           (else 'fail)))
    'foobar)
  (test 'case-5
    (ev '(case 'baz
           ((4) 'four)
           (((3 4)) 'multiple)
           ((3) 'three)
           ((foo bar) 'foobar)
           (else 'fail)))
    'fail)
  (test 'case-6
    (ev '(case '(3 4)
           ((4) 'four)
           (((3 4)) 'multiple)
           ((3) 'three)
           ((foo bar) 'foobar)
           (else 'fail)))
    'multiple)

  (test 'match-1
    (ev '(match 3
           (2              'two)
           (3              'three)
           (`(,x ,y ,z)    `(proper: ,x ,y ,z))
           ((list x w)     `(list: ,x ,w))
           (`(,x ,y ,@z)   `(splice: ,x ,y ,z))
           (`(,x ,y . ,z)  `(improper: ,x ,y ,z))
           ((list* x y)    `(cons: ,x ,y))
           ((vector x y z) `(vector: ,x ,y ,z))
           (`#(,x ,y ,@z)  `(vector-splice: ,x ,y ,z))
           ('foo           'bar)
           (_              'fail)))
    'three)
  (test 'match-2
    (ev '(match 'foo
           (2 'two)
           (3 'three)
           (`(,x ,y ,z) `(proper: ,x ,y ,z))
           ((list x y) `(list: ,x ,y))
           (`(,x ,y ,@z) `(splice: ,x ,y ,z))
           (`(,x ,y . ,z) `(improper: ,x ,y ,z))
           ((list* x y) `(cons: ,x ,y))
           ((vector x y z) `(vector: ,x ,y ,z))
           (`#(,x ,y ,@z) `(vector-splice: ,x ,y ,z))
           ('foo 'bar)
           (_ 'fail)))
    'bar)
  (test 'match-3
    (ev '(match 5
           (2 'two)
           (3 'three)
           (`(,x ,y ,z) `(proper: ,x ,y ,z))
           ((list x y) `(list: ,x ,y))
           (`(,x ,y ,@z) `(splice: ,x ,y ,z))
           (`(,x ,y . ,z) `(improper: ,x ,y ,z))
           ((list* x y) `(cons: ,x ,y))
           ((vector x y z) `(vector: ,x ,y ,z))
           (`#(,x ,y ,@z) `(vector-splice: ,x ,y ,z))
           ('foo 'bar)
           (_ 'fail)))
    'fail)
  (test 'match-4
    (ev '(match '(a b c)
           (2 'two)
           (3 'three)
           (`(,x ,y ,z) `(proper: ,x ,y ,z))
           ((list x y) `(list: ,x ,y))
           (`(,x ,y ,@z) `(splice: ,x ,y ,z))
           (`(,x ,y . ,z) `(improper: ,x ,y ,z))
           ((list* x y) `(cons: ,x ,y))
           ((vector x y z) `(vector: ,x ,y ,z))
           (`#(,x ,y ,@z) `(vector-splice: ,x ,y ,z))
           ('foo 'bar)
           (_ 'fail)))
    '(proper: a b c))
  (test 'match-5
    (ev '(match '(a b c d)
           (2 'two)
           (3 'three)
           (`(,x ,y ,z) `(proper: ,x ,y ,z))
           ((list x y) `(list: ,x ,y))
           (`(,x ,y ,@z) `(splice: ,x ,y ,z))
           (`(,x ,y . ,z) `(improper: ,x ,y ,z))
           ((list* x y) `(cons: ,x ,y))
           ((vector x y z) `(vector: ,x ,y ,z))
           (`#(,x ,y ,@z) `(vector-splice: ,x ,y ,z))
           ('foo 'bar)
           (_ 'fail)))
    '(splice: a b (c d)))
  (test 'match-6
    (ev '(match '(a b c . d)
           (2 'two)
           (3 'three)
           (`(,x ,y ,z) `(proper: ,x ,y ,z))
           ((list x y) `(list: ,x ,y))
           (`(,x ,y ,@z) `(splice: ,x ,y ,z))
           (`(,x ,y . ,z) `(improper: ,x ,y ,z))
           ((list* x y) `(cons: ,x ,y))
           ((vector x y z) `(vector: ,x ,y ,z))
           (`#(,x ,y ,@z) `(vector-splice: ,x ,y ,z))
           ('foo 'bar)
           (_ 'fail)))
    '(improper: a b (c . d)))
  (test 'match-7
    (ev '(match '(a . b)
           (2 'two)
           (3 'three)
           (`(,x ,y ,z) `(proper: ,x ,y ,z))
           ((list x y) `(list: ,x ,y))
           (`(,x ,y ,@z) `(splice: ,x ,y ,z))
           (`(,x ,y . ,z) `(improper: ,x ,y ,z))
           ((list* x y) `(cons: ,x ,y))
           ((vector x y z) `(vector: ,x ,y ,z))
           (`#(,x ,y ,@z) `(vector-splice: ,x ,y ,z))
           ('foo 'bar)
           (_ 'fail)))
    '(cons: a b))
  (test 'match-8
    (ev '(match '(a b)
           (2 'two)
           (3 'three)
           (`(,x ,y ,z) `(proper: ,x ,y ,z))
           ((list x y) `(list: ,x ,y))
           (`(,x ,y ,@z) `(splice: ,x ,y ,z))
           (`(,x ,y . ,z) `(improper: ,x ,y ,z))
           ((list* x y) `(cons: ,x ,y))
           ((vector x y z) `(vector: ,x ,y ,z))
           (`#(,x ,y ,@z) `(vector-splice: ,x ,y ,z))
           ('foo 'bar)
           (_ 'fail)))
    '(list: a b))
  (test 'match-9
    (ev '(match '#(a b c d)
           (2 'two)
           (3 'three)
           (`(,x ,y ,z) `(proper: ,x ,y ,z))
           ((list x y) `(list: ,x ,y))
           (`(,x ,y ,@z) `(splice: ,x ,y ,z))
           (`(,x ,y . ,z) `(improper: ,x ,y ,z))
           ((list* x y) `(cons: ,x ,y))
           ((vector x y z) `(vector: ,x ,y ,z))
           (`#(,x ,y ,@z) `(vector-splice: ,x ,y ,z))
           ('foo 'bar)
           (_ 'fail)))
    '(vector-splice: a b (c d)))
  (test 'match-10
    (ev '(match '#(a b c)
           (2 'two)
           (3 'three)
           (`(,x ,y ,z) `(proper: ,x ,y ,z))
           ((list x y) `(list: ,x ,y))
           (`(,x ,y ,@z) `(splice: ,x ,y ,z))
           (`(,x ,y . ,z) `(improper: ,x ,y ,z))
           ((list* x y) `(cons: ,x ,y))
           ((vector x y z) `(vector: ,x ,y ,z))
           (`#(,x ,y ,@z) `(vector-splice: ,x ,y ,z))
           ('foo 'bar)
           (_ 'fail)))
    '(vector: a b c))
  (test 'match-11
    (ev '(match '((1) #t (three (4 five) six) 7) loop
           ('() '())
           (`(,a . ,d) (cons (loop a) (loop d)))
           (n (guard (number? n)) 'n)
           (s (guard (string? s)) 's)
           (_ '?)))
    '((n) ? (s (n s) s) n))
  )

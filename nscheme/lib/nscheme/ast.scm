(provide ast:quote ast:var ast:set! ast:if ast:apply ast:lambda
         ast:prim ast:context ast-eval test!)
(require type-predicates primitive-op-descriptions param-bind)

(define (ast:quote datum)       (vector 'quote   datum))
(define (ast:var address)       (vector 'var     address))
(define (ast:set! param arg)    (vector 'set!    param arg))
(define (ast:if c t f)          (vector 'if      c t f))
(define (ast:apply proc arg)    (vector 'apply   proc arg))
(define (ast:lambda param body) (vector 'lambda  param body))
(define (ast:prim name a*)      (vector 'prim    name a*))
(define (ast:context name a*)   (vector 'context name a*))

;; Dynamic context operations
(define context-ops
  (list (cons 'reset (lambda (proc) (reset (proc))))
        (cons 'shift (lambda (proc) (shift k (proc k))))))

;; Primitive operations
(define primitive-op-handlers
  (list (cons 'procedure?      procedure?)
        (cons 'mvector?        mvector?)
        (cons 'vector?         vector?)
        (cons 'pair?           pair?)
        (cons 'null?           null?)
        (cons 'boolean?        boolean?)
        (cons 'string?         string?)
        (cons 'number?         number?)
        (cons 'integer?        integer?)
        (cons 'fixnum?         fixnum?)
        (cons 'flonum?         flonum?)
        (cons 'boolean=?       boolean=?)
        (cons 'number=?        number=?)
        (cons 'string=?        string=?)
        (cons 'mvector=?       mvector=?)
        (cons 'procedure=?     procedure=?)
        (cons 'string->vector  string->vector)
        (cons 'vector->string  vector->string)
        (cons 'cons            cons)
        (cons 'car             car)
        (cons 'cdr             cdr)
        (cons 'vector-ref      vector-ref)
        (cons 'vector-length   vector-length)
        (cons 'make-mvector    make-mvector)
        (cons 'mvector->vector mvector->vector)
        (cons 'mvector-set!    mvector-set!)
        (cons 'mvector-ref     mvector-ref)
        (cons 'mvector-length  mvector-length)
        (cons 'string<?        string<?)
        (cons 'string>?        string>?)
        (cons '=               =)
        (cons '<=              <=)
        (cons '<               <)
        (cons '>=              >=)
        (cons '>               >)
        (cons '+               +)
        (cons '*               *)
        (cons '-               -)
        (cons '/               /)
        (cons 'truncate        truncate)))

(unless (= (length primitive-op-descriptions) (length primitive-op-handlers))
  (error '"mismatching primitive op handlers:"
         (map car primitive-op-handlers) (map car primitive-op-descriptions)))

(define primitive-ops
  (map (lambda (po-desc)
         (define name (car po-desc))
         (define arg-sig (cadr po-desc))
         (define return-sig (caddr po-desc))  ;; TODO: validate return type?
         (define op (cdr (assoc name primitive-op-handlers)))
         (define (valid? a*)
           (andmap (lambda (ty? a)
                     (or (not ty?) ((cdr (assoc ty? type-predicates)) a)))
                   arg-sig a*))
         (define (full-op a*)
           (if (valid? a*) (apply op a*)
             (error '"primitive op type error:" name arg-sig a*)))
         (cons name full-op)) primitive-op-descriptions))

;; Runtime environments
(define env:empty '())
(define (env-extend* env b*)
  (foldl (lambda (b e)
           (define cell    (make-mvector 1 (cdr b)))
           (define (get)   (mvector-ref  cell 0))
           (define (set v) (mvector-set! cell 0 v))
           (cons (cons (car b) (cons get set)) e)) env b*))
(define (env-ref-capabilities env addr)
  (define rib (assoc addr env))
  (if rib (cdr rib) (error '"unbound address:" addr)))
(define (env-ref env addr)    ((car (env-ref-capabilities env addr))))
(define (env-set! env addr v) ((cdr (env-ref-capabilities env addr)) v))

(define (ast-eval ast)
  ((let ev ((ast ast))
     (define (@ i) (vector-ref ast i)) (define (? tag) (equal? (@ 0) tag))
     (if (procedure? ast) ast
       (cond ((? 'quote)  (let ((datum (@ 1))) (lambda (env) datum)))
             ((? 'var)    (let ((n (@ 1)))     (lambda (env) (env-ref env n))))
             ((? 'set!)   (let ((param (@ 1)) (arg (ev (@ 2))))
                            (lambda (env)
                              (define (! b) (env-set! env (car b) (cdr b)))
                              (for-each ! (param-bind param (arg env))))))
             ((? 'if)     (let ((c (ev (@ 1))) (t (ev (@ 2))) (f (ev (@ 3))))
                            (lambda (env) (if (c env) (t env) (f env)))))
             ((? 'apply)  (let ((proc (ev (@ 1))) (arg (ev (@ 2))))
                            (lambda (env) (apply (proc env) (arg env)))))
             ((? 'lambda) (let ((param (@ 1)) (body (ev (@ 2))))
                            (lambda (env) (lambda arg
                                            (define b* (param-bind param arg))
                                            (body (env-extend* env b*))))))
             ((? 'prim)   (let ((name (@ 1)) (a* (map ev (@ 2))))
                            (define op (or (alist-get primitive-ops name #f)
                                           (error '"invalid primitive:" name)))
                            (lambda (env) (op (map (lambda (a) (a env)) a*)))))
             ((? 'context)
              (let ((name (@ 1)) (a* (map ev (@ 2))))
                (define op (or (alist-get context-ops name #f)
                               (error '"invalid context op:" name)))
                (lambda (env) (apply op (map (lambda (a) (a env)) a*)))))
             (#t          (error '"unknown ast:" ast))))) env:empty))

(define (test! test)
  (test 'quote
    (ast-eval '#(quote 7))
    7)
  (test 'if-1
    (ast-eval '#(if #(quote #t) #(quote 1) #(quote 2)))
    1)
  (test 'if-2
    (ast-eval '#(if #(quote #f) #(quote 1) #(quote 2)))
    2))

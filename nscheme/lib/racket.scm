(provide rkt:quote rkt:var rkt:set! rkt:if rkt:apply rkt:lambda
         rkt:let rkt:letrec rkt:begin racket->datum)

(define (rkt:quote datum)          (vector 'quote  datum))
(define (rkt:var id)               (vector 'var    id))
(define (rkt:set! id arg)          (vector 'set!   id arg))
(define (rkt:if c t f)             (vector 'if     c t f))
(define (rkt:apply p a*)           (vector 'apply  p a*))
(define (rkt:lambda param body)    (vector 'lambda param body))
(define (rkt:let bindings body)    (vector 'let    bindings body))
(define (rkt:letrec bindings body) (vector 'letrec bindings body))
(define (rkt:begin e*)             (vector 'begin  e*))

(define (~map f ~xs)
  (cond ((pair? ~xs) (cons (f (car ~xs)) (~map f (cdr ~xs))))
        ((null? ~xs) '())
        (#t (f ~xs))))

(define (racket->datum ast)
  (define (fail) (error '"invalid racket syntax:" ast))
  (define alen (and (vector? ast) (- (vector-length ast) 1)))
  (unless (and alen (<= 1 alen)) (fail))
  (define (@ i)       (vector-ref ast i))
  (define (@^ i)      (racket->datum (@ i)))
  (define (? tag ary) (and (equal? tag (@ 0)) (or (= alen ary)) (fail)))
  (define (sym s)     (vector 'symbol s))
  (define (vsym p)    (unless (string? p) (fail)) (sym (string-append 'v. p)))
  (define (binding b) (unless (and (vector? b) (= (vector-length b) 2)) (fail))
    (list (vsym (car b)) (racket->datum (cadr b))))
  (define (body e) (if (and (pair? e) (equal? '#(symbol begin) (car e)))
                     (cdr e) (list e)))
  (cond ((? 'quote  1) (list (sym 'quote) (@ 1)))
        ((? 'var    1) (vsym (@ 1)))
        ((? 'set!   2) (list (sym 'set!) (vsym (@ 1)) (racket->datum (@ 2))))
        ((? 'if     3) (list (sym 'if) (@^ 1) (@^ 2) (@^ 3)))
        ((? 'apply  2) (cons (@^ 1) (map racket->datum (@ 2))))
        ((? 'lambda 2) (list* (sym 'lambda) (~map vsym (@ 1)) (body (@^ 2))))
        ((? 'begin  1) (cons (sym 'begin) (map racket->datum (@ 1))))
        ((or (? 'let 2) (? 'letrec 2))
         (unless (list? (@ 1)) (fail))
         (list* (sym (@ 0)) (map binding (@ 1)) (body (@^ 2))))
        (#t (fail))))

;; TODO: simplify and optimize racket ASTs if applicable.

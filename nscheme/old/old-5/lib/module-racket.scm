((provide module:rkt:module-lang module:rkt:module-name module:rkt:define-name
          module:rkt:provide module:rkt:require
          module:rkt:prefix module:rkt:suffix rkt:module)
 (require module-provide module-require module-ast module-meta module:meta
          ast->racket-datum))

(define (module:rkt:module-lang m name)
  (module:meta m (list (cons 'rkt:module-lang (list name)))))
(define (module:rkt:module-name m name)
  (module:meta m (list (cons 'rkt:module-name (list name)))))
(define (module:rkt:define-name m name)
  (module:meta m (list (cons 'rkt:define-name (list name)))))
(define (module:rkt:provide m name*)
  (module:meta m (list (cons 'rkt:provide name*))))
(define (module:rkt:require m name*)
  (module:meta m (list (cons 'rkt:require name*))))
(define (module:rkt:prefix m rkt*)
  (module:meta m (list (cons 'rkt:prefix rkt*))))
(define (module:rkt:suffix m rkt*)
  (module:meta m (list (cons 'rkt:suffix rkt*))))

(define (rkt:module m)
  (define prov (map (lambda (sym) (vector 'string sym)) (module-provide m)))
  (define (pget prop-name) (alist-get (module-meta m) prop-name '()))
  (append '(module) (pget 'rkt:module-name) (pget 'rkt:module-lang)
          (let ((ns (reverse (pget 'rkt:provide))))
            (if (null? ns) '() (list (cons 'provide ns))))
          (let ((ns (reverse (pget 'rkt:require))))
            (if (null? ns) '() (list (cons 'require ns))))
          (reverse (pget 'rkt:prefix))
          (list (list 'define (cons (car (pget 'rkt:define-name))
                                    (module-require m))
                      (list 'map 'cons (list 'quote prov)
                            (list (ast->racket-datum (module-ast m))
                                  (cons 'list (module-require m))))))
          (pget 'rkt:suffix)))
